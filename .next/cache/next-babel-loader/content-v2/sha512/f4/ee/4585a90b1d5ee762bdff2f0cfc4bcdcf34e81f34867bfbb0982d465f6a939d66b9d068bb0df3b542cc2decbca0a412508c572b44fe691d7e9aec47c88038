{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\MY Projects\\\\Cloned Projects\\\\Sharpner-React\\\\Sharp-react\\\\pages\\\\index.js\";\n// pages/index.js\nimport React, { useState, useEffect } from 'react';\nimport TodoList from '../components/TodoList';\nimport TodoForm from '../components/TodoForm';\nimport axios from 'axios';\n\nconst Home = () => {\n  const {\n    0: todos,\n    1: setTodos\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n\n  const fetchTodos = async () => {\n    try {\n      const response = await axios.get('/api/todo');\n      setTodos(response.data.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []); // Fetch todos on component mount\n\n  const handleTodoAdded = async () => {\n    // Re-fetch todos after successfully adding a new todo\n    await fetchTodos();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      onTodoAdded: handleTodoAdded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading todos...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["F:/MY Projects/Cloned Projects/Sharpner-React/Sharp-react/pages/index.js"],"names":["React","useState","useEffect","TodoList","TodoForm","axios","Home","todos","setTodos","loading","setLoading","fetchTodos","response","get","data","error","console","handleTodoAdded"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMU,UAAU,GAAG,YAAY;AAC7B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,WAAV,CAAvB;AACAL,MAAAA,QAAQ,CAACI,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAR;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD,CAIE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACAL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GATD;;AAWAR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT,CAfiB,CAiBT;;AAER,QAAMM,eAAe,GAAG,YAAY;AAClC;AACA,UAAMN,UAAU,EAAhB;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,WAAW,EAAEM;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF,EAIGR,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF;AAAjB;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CApCD;;AAsCA,eAAeD,IAAf","sourcesContent":["// pages/index.js\n\nimport React, { useState, useEffect } from 'react';\nimport TodoList from '../components/TodoList';\nimport TodoForm from '../components/TodoForm';\nimport axios from 'axios';\n\nconst Home = () => {\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const fetchTodos = async () => {\n    try {\n      const response = await axios.get('/api/todo');\n      setTodos(response.data.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []); // Fetch todos on component mount\n\n  const handleTodoAdded = async () => {\n    // Re-fetch todos after successfully adding a new todo\n    await fetchTodos();\n  };\n\n  return (\n    <div>\n      <h1>Todo App</h1>\n      <TodoForm onTodoAdded={handleTodoAdded} />\n\n      {loading ? (\n        <p>Loading todos...</p>\n      ) : (\n        <TodoList todos={todos} />\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}