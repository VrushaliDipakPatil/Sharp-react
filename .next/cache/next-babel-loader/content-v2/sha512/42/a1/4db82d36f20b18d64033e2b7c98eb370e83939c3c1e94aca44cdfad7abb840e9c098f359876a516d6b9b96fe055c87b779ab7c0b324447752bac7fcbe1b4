{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\MY Projects\\\\Cloned Projects\\\\Sharpner-React\\\\Sharp-react\\\\pages\\\\index.js\";\nimport { useRef, useState } from \"react\";\nimport { MongoClient } from 'mongodb';\nexport default function Home(props) {\n  const titleInputRef = useRef();\n\n  async function addTodoHandler() {\n    const enteredTodo = {\n      title: titleInputRef.current.value,\n      completed: false\n    };\n    const response = await fetch(\"/api/new-todo\", {\n      method: \"POST\",\n      body: JSON.stringify(enteredTodo),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  async function deleteTodoHandler(todoId) {\n    const response = await fetch(`/api/delete-todo/${todoId}`, {\n      method: \"DELETE\"\n    });\n\n    if (response.ok) {\n      // Refresh the todo list after deletion\n      // You may want to fetch the updated todo list here or update the state to reflect the change\n      console.log(\"Todo deleted successfully\");\n    } else {\n      console.error(\"Failed to delete todo\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"To-do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: titleInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTodoHandler,\n        children: \" Add To-do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), props.todoData.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [todo.title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }, this))]\n  }, void 0, true);\n}\nexport async function getStaticProps() {\n  const client = await MongoClient.connect(\"mongodb+srv://vrushalip91097:vrushrani@cluster0.olkd5ds.mongodb.net/todos?retryWrites=true&w=majority\");\n  const db = client.db();\n  const todosCollection = db.collection(\"todos\");\n  const todos = await todosCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      todoData: todos.map(todo => ({\n        title: todo.title,\n        completed: todo.completed,\n        id: todo._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}","map":{"version":3,"sources":["F:/MY Projects/Cloned Projects/Sharpner-React/Sharp-react/pages/index.js"],"names":["useRef","useState","MongoClient","Home","props","titleInputRef","addTodoHandler","enteredTodo","title","current","value","completed","response","fetch","method","body","JSON","stringify","headers","data","json","console","log","deleteTodoHandler","todoId","ok","error","todoData","map","todo","id","getStaticProps","client","connect","db","todosCollection","collection","todos","find","toArray","close","_id","toString","revalidate"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,QAAMC,aAAa,GAAGL,MAAM,EAA5B;;AAGA,iBAAeM,cAAf,GAAgC;AAC9B,UAAMC,WAAW,GAAG;AAChBC,MAAAA,KAAK,EAAGH,aAAa,CAACI,OAAd,CAAsBC,KADd;AAEhBC,MAAAA,SAAS,EAAE;AAFK,KAApB;AAKA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,EAAkB;AAC5CC,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,WAAf,CAFsC;AAG5CW,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHmC,KAAlB,CAA5B;AAMA,UAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAED;;AAED,iBAAeI,iBAAf,CAAiCC,MAAjC,EAAyC;AACvC,UAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,oBAAmBW,MAAO,EAA5B,EAA+B;AACzDV,MAAAA,MAAM,EAAE;AADiD,KAA/B,CAA5B;;AAIA,QAAIF,QAAQ,CAACa,EAAb,EAAiB;AACf;AACA;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD,KAJD,MAIO;AACLD,MAAAA,OAAO,CAACK,KAAR,CAAc,uBAAd;AACD;AACF;;AAED,sBACE;AAAA,4BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAErB;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAMGF,KAAK,CAACuB,QAAN,CAAeC,GAAf,CAAoBC,IAAD,iBACZ;AAAA,8BACA;AAAO,QAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,mBAAOA,IAAI,CAACrB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA,OAAUqB,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA,YADP,CANH;AAAA,kBADF;AAiBD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAM9B,WAAW,CAAC+B,OAAZ,CACnB,uGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,eAAe,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAxB;AAEA,QAAMC,KAAK,GAAG,MAAMF,eAAe,CAACG,IAAhB,GAAuBC,OAAvB,EAApB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLpC,IAAAA,KAAK,EAAE;AACHuB,MAAAA,QAAQ,EAAEU,KAAK,CAACT,GAAN,CAAWC,IAAD,KAAW;AAC/BrB,QAAAA,KAAK,EAAEqB,IAAI,CAACrB,KADmB;AAE/BG,QAAAA,SAAS,EAAEkB,IAAI,CAAClB,SAFe;AAG/BmB,QAAAA,EAAE,EAAED,IAAI,CAACY,GAAL,CAASC,QAAT;AAH2B,OAAX,CAAV;AADP,KADF;AAQLC,IAAAA,UAAU,EAAE;AARP,GAAP;AAUD","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport { MongoClient } from 'mongodb';\r\n\r\nexport default function Home(props) {\r\n  const titleInputRef = useRef();\r\n\r\n\r\n  async function addTodoHandler() {\r\n    const enteredTodo = {\r\n        title : titleInputRef.current.value,\r\n        completed: false\r\n    }\r\n \r\n    const response = await fetch(\"/api/new-todo\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(enteredTodo),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    console.log(data);\r\n\r\n  }\r\n\r\n  async function deleteTodoHandler(todoId) {\r\n    const response = await fetch(`/api/delete-todo/${todoId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    if (response.ok) {\r\n      // Refresh the todo list after deletion\r\n      // You may want to fetch the updated todo list here or update the state to reflect the change\r\n      console.log(\"Todo deleted successfully\");\r\n    } else {\r\n      console.error(\"Failed to delete todo\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2>To-do List</h2>\r\n        <input type=\"text\" ref={titleInputRef} />\r\n        <button onClick={addTodoHandler}> Add To-do</button>\r\n      </div>\r\n      {props.todoData.map((todo)=>(\r\n              <div key={todo.id}>\r\n              <input type=\"checkbox\" />\r\n              <span>{todo.title} </span>\r\n              <button >Delete</button>\r\n            </div>\r\n      ))}\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://vrushalip91097:vrushrani@cluster0.olkd5ds.mongodb.net/todos?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const todosCollection = db.collection(\"todos\");\r\n\r\n  const todos = await todosCollection.find().toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n        todoData: todos.map((todo) => ({\r\n        title: todo.title,\r\n        completed: todo.completed,\r\n        id: todo._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}