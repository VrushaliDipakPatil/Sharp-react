{"ast":null,"code":"import _regeneratorRuntime from \"F:/MY Projects/Cloned Projects/Sharpner-React/Sharp-react/node_modules/@babel/runtime/regenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"F:/MY Projects/Cloned Projects/Sharpner-React/Sharp-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"F:\\\\MY Projects\\\\Cloned Projects\\\\Sharpner-React\\\\Sharp-react\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nexport var __N_SSG = true;\nexport default function Home(props) {\n  _s();\n\n  var _this = this;\n\n  var titleInputRef = useRef();\n\n  function addTodoHandler() {\n    return _addTodoHandler.apply(this, arguments);\n  }\n\n  function _addTodoHandler() {\n    _addTodoHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var enteredTodo, response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              enteredTodo = {\n                title: titleInputRef.current.value,\n                completed: false\n              };\n              _context.next = 3;\n              return fetch(\"/api/new-todo\", {\n                method: \"POST\",\n                body: JSON.stringify(enteredTodo),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context.sent;\n              console.log(data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addTodoHandler.apply(this, arguments);\n  }\n\n  function deleteTodoHandler(_x) {\n    return _deleteTodoHandler.apply(this, arguments);\n  }\n\n  function _deleteTodoHandler() {\n    _deleteTodoHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(todoId) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"/api/delete-todo/\".concat(todoId), {\n                method: \"DELETE\"\n              });\n\n            case 2:\n              response = _context2.sent;\n\n              if (response.ok) {\n                // Refresh the todo list after deletion\n                // You may want to fetch the updated todo list here or update the state to reflect the change\n                console.log(\"Todo deleted successfully\");\n              } else {\n                console.error(\"Failed to delete todo\");\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _deleteTodoHandler.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"To-do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: titleInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTodoHandler,\n        children: \" Add To-do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), props.todoData.map(function (todo) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [todo.title, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, _this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, _this);\n    })]\n  }, void 0, true);\n}\n\n_s(Home, \"+6zqG/+0Uo7xdn5W2JH9OTF5JNQ=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/MY Projects/Cloned Projects/Sharpner-React/Sharp-react/pages/index.js"],"names":["useRef","useState","Home","props","titleInputRef","addTodoHandler","enteredTodo","title","current","value","completed","fetch","method","body","JSON","stringify","headers","response","json","data","console","log","deleteTodoHandler","todoId","ok","error","todoData","map","todo","id"],"mappings":";;;;;;;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;AAGA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAAA;;AAClC,MAAMC,aAAa,GAAGJ,MAAM,EAA5B;;AADkC,WAInBK,cAJmB;AAAA;AAAA;;AAAA;AAAA,+EAIlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,WADR,GACsB;AAChBC,gBAAAA,KAAK,EAAGH,aAAa,CAACI,OAAd,CAAsBC,KADd;AAEhBC,gBAAAA,SAAS,EAAE;AAFK,eADtB;AAAA;AAAA,qBAMyBC,KAAK,CAAC,eAAD,EAAkB;AAC5CC,gBAAAA,MAAM,EAAE,MADoC;AAE5CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,WAAf,CAFsC;AAG5CU,gBAAAA,OAAO,EAAE;AAAE,kCAAgB;AAAlB;AAHmC,eAAlB,CAN9B;;AAAA;AAMQC,cAAAA,QANR;AAAA;AAAA,qBAYqBA,QAAQ,CAACC,IAAT,EAZrB;;AAAA;AAYQC,cAAAA,IAZR;AAcEC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJkC;AAAA;AAAA;;AAAA,WAsBnBG,iBAtBmB;AAAA;AAAA;;AAAA;AAAA,kFAsBlC,kBAAiCC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACyBZ,KAAK,4BAAqBY,MAArB,GAA+B;AACzDX,gBAAAA,MAAM,EAAE;AADiD,eAA/B,CAD9B;;AAAA;AACQK,cAAAA,QADR;;AAKE,kBAAIA,QAAQ,CAACO,EAAb,EAAiB;AACf;AACA;AACAJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD,eAJD,MAIO;AACLD,gBAAAA,OAAO,CAACK,KAAR,CAAc,uBAAd;AACD;;AAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtBkC;AAAA;AAAA;;AAoClC,sBACE;AAAA,4BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAErB;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAMGF,KAAK,CAACuB,QAAN,CAAeC,GAAf,CAAmB,UAACC,IAAD;AAAA,0BACZ;AAAA,gCACA;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,iBADA,eAEA;AAAA,qBAAOA,IAAI,CAACrB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHA;AAAA,SAAUqB,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA,eADY;AAAA,KAAnB,CANH;AAAA,kBADF;AAiBD;;GArDuB3B,I;;KAAAA,I","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport { MongoClient } from 'mongodb';\r\n\r\nexport default function Home(props) {\r\n  const titleInputRef = useRef();\r\n\r\n\r\n  async function addTodoHandler() {\r\n    const enteredTodo = {\r\n        title : titleInputRef.current.value,\r\n        completed: false\r\n    }\r\n \r\n    const response = await fetch(\"/api/new-todo\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(enteredTodo),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    console.log(data);\r\n\r\n  }\r\n\r\n  async function deleteTodoHandler(todoId) {\r\n    const response = await fetch(`/api/delete-todo/${todoId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    if (response.ok) {\r\n      // Refresh the todo list after deletion\r\n      // You may want to fetch the updated todo list here or update the state to reflect the change\r\n      console.log(\"Todo deleted successfully\");\r\n    } else {\r\n      console.error(\"Failed to delete todo\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2>To-do List</h2>\r\n        <input type=\"text\" ref={titleInputRef} />\r\n        <button onClick={addTodoHandler}> Add To-do</button>\r\n      </div>\r\n      {props.todoData.map((todo)=>(\r\n              <div key={todo.id}>\r\n              <input type=\"checkbox\" />\r\n              <span>{todo.title} </span>\r\n              <button >Delete</button>\r\n            </div>\r\n      ))}\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://vrushalip91097:vrushrani@cluster0.olkd5ds.mongodb.net/todos?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const todosCollection = db.collection(\"todos\");\r\n\r\n  const todos = await todosCollection.find().toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n        todoData: todos.map((todo) => ({\r\n        title: todo.title,\r\n        completed: todo.completed,\r\n        id: todo._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}