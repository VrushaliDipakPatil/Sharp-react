{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"F:/MY Projects/Cloned Projects/Sharpner-React/Sharp-react/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"F:/MY Projects/Cloned Projects/Sharpner-React/Sharp-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"F:\\\\MY Projects\\\\Cloned Projects\\\\Sharpner-React\\\\Sharp-react\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// pages/index.js\nimport React, { useState, useEffect } from 'react';\nimport TodoList from '../components/TodoList';\nimport TodoForm from '../components/TodoForm';\nimport axios from 'axios';\n\nvar Home = function Home() {\n  _s();\n\n  var _useState = useState([]),\n      todos = _useState[0],\n      setTodos = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var fetchTodos = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('/api/todo');\n\n            case 3:\n              response = _context.sent;\n              setTodos(response.data.data);\n              setLoading(false);\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching todos:', _context.t0);\n              setLoading(false);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function fetchTodos() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchTodos();\n  }, []); // Fetch todos on component mount\n\n  var handleTodoAdded = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetchTodos();\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleTodoAdded() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      onTodoAdded: handleTodoAdded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading todos...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, _this) : /*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Home, \"Q+SulLHKuBZzk+ag3OV6DHBynQg=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/MY Projects/Cloned Projects/Sharpner-React/Sharp-react/pages/index.js"],"names":["React","useState","useEffect","TodoList","TodoForm","axios","Home","todos","setTodos","loading","setLoading","fetchTodos","get","response","data","console","error","handleTodoAdded"],"mappings":";;;;;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,kBACSL,QAAQ,CAAC,EAAD,CADjB;AAAA,MACVM,KADU;AAAA,MACHC,QADG;;AAAA,mBAEaP,QAAQ,CAAC,IAAD,CAFrB;AAAA,MAEVQ,OAFU;AAAA,MAEDC,UAFC;;AAIjB,MAAMC,UAAU;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEQN,KAAK,CAACO,GAAN,CAAU,WAAV,CAFR;;AAAA;AAETC,cAAAA,QAFS;AAGfL,cAAAA,QAAQ,CAACK,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAAR;AACAJ,cAAAA,UAAU,CAAC,KAAD,CAAV;AAJe;AAAA;;AAAA;AAAA;AAAA;AAMfK,cAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd;AACAN,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVC,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAWAT,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT,CAfiB,CAiBT;;AAER,MAAMM,eAAe;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEhBN,UAAU,EAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfM,eAAe;AAAA;AAAA;AAAA,KAArB;;AAKA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,QAAD;AAAU,MAAA,WAAW,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA,aAFF,EAIGR,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADM,gBAGN,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF;AAAjB;AAAA;AAAA;AAAA;AAAA,aAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAYD,CApCD;;GAAMD,I;;KAAAA,I;AAsCN,eAAeA,IAAf","sourcesContent":["// pages/index.js\n\nimport React, { useState, useEffect } from 'react';\nimport TodoList from '../components/TodoList';\nimport TodoForm from '../components/TodoForm';\nimport axios from 'axios';\n\nconst Home = () => {\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const fetchTodos = async () => {\n    try {\n      const response = await axios.get('/api/todo');\n      setTodos(response.data.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []); // Fetch todos on component mount\n\n  const handleTodoAdded = async () => {\n    // Re-fetch todos after successfully adding a new todo\n    await fetchTodos();\n  };\n\n  return (\n    <div>\n      <h1>Todo App</h1>\n      <TodoForm onTodoAdded={handleTodoAdded} />\n\n      {loading ? (\n        <p>Loading todos...</p>\n      ) : (\n        <TodoList todos={todos} />\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}